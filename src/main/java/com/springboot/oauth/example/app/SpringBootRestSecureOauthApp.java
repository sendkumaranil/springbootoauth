package com.springboot.oauth.example.app;
/**
 * @author anilkumar
 * Our use-case fits well with Resource-owner Password Grant flow of OAUth2 specification.
 * 
 * We will be using resource owner password credentials grant type. The reason is simple, we are not implementing a view which redirects us to a login page. 
 * Only the usage where a client [Postman or RestTemplate based Java client e.g.] 
 * have the Resource ownerâ€™s credentials and they provide those credential [along with client credentials] 
 * to authorization server in order to eventually receive the access-token[and optionally refresh token], 
 * and then use that token to actually access the resources.
 * OAuth2 Tokens:Tokens are implementation specific random strings, generated by the authorization server and are issued when the client requests them.
 * Access Token : Sent with each request, usually valid for a very short life time [an hour e.g.]
 * Refresh Token : Mainly used to get a new access token, not sent with each request, usually lives longer than access token.
 */
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBootRestSecureOauthApp {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootRestSecureOauthApp.class, args);
	}

}
